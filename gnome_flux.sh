#!/bin/bash
#
# Dependencies:
#
#  curl, jq
#
# Usage:
#
#  ./gnome_flux.sh -l|--location [city] -p|--profile [profile]
#

function usage(){
	printf "
Usage: ./gnome_flux.sh -l|--location [city] -p|--profile [classic|reduce_eyestrain]

Both options are mandatory.

  -l, --location
  	Input city you are living
  -p, --profile
  	Input profile between:
	  \e[4mclassic\e[0m
	    This mode use 6500k classic color during day and 4000k red color during night.
	  \e[4mreduce_eyestrain\e[0m
	    This mode use 5900k color during day for reducing eyestrain, and 4000k red color during night.
  -h, --help
  	Display this help and exit

Example: ./gnome_flux.sh -l Paris -p reduce_eyestrain

"
}

function get_info(){
	woeid=`curl -s "https://www.metaweather.com/api/location/search/?query=$1" | jq '.[].woeid'`

	if [ ! $woeid ]
	then
		echo "Location not found !"
		exit 0
	fi

	current_time=`curl -s "https://www.metaweather.com/api/location/$woeid/" | jq '.time' | sed "s/\"//g"`
	sun_rise=`curl -s "https://www.metaweather.com/api/location/$woeid/" | jq '.sun_rise' | sed "s/\"//g"`
	sun_set=`curl -s "https://www.metaweather.com/api/location/$woeid/" | jq '.sun_set' | sed "s/\"//g"`

	s_time=`date +%s -d "$current_time"`
	s_sun_rise=`date +%s -d "$sun_rise"`
	s_sun_set=`date +%s -d "$sun_set"`

	mm_sun_rise=`date +%T -d "$sun_rise" | cut -d":" -f2`
	mm_sun_set=`date +%T -d "$sun_set" | cut -d":" -f2`

	hh_sun_rise=`date +%T -d "$sun_rise" | cut -d":" -f1`
	hh_sun_set=`date +%T -d "$sun_set" | cut -d":" -f1`

	if [ "$s_sun_set" -gt "$s_time" ] &&  [ "$s_time" -gt "$s_sun_rise" ] ;
	then
		day_time=day
	else
		day_time=night
	fi
}

function gnome_hue(){
	day_hue=$2
	night_hue=$3

	printf "\nUsing \e[36;1m%s\e[0m profile with this colors :\n- During Day : %sk\n- During Night : %sk\n\n" "$1" "$day_hue" "$night_hue"
	
	if [ $day_time == "day" ]
	then
		gsettings set org.gnome.settings-daemon.plugins.color night-light-enabled true
		gsettings set org.gnome.settings-daemon.plugins.color night-light-temperature $day_hue
		printf "Using \e[33;1m%sk\e[0m for now.\n\n" "$day_hue"
	else
		gsettings set org.gnome.settings-daemon.plugins.color night-light-enabled true
		gsettings set org.gnome.settings-daemon.plugins.color night-light-temperature $night_hue
		printf "Using \e[33;1m%sk\e[0m for now.\n\n" "$night_hue"
	fi

	cat <<EOF > /etc/cron.d/gnome_hue
# Generated by gnome_hue script with "$profile" profile.
$mm_sun_rise $hh_sun_rise * * * gsettings set org.gnome.settings-daemon.plugins.color night-light-temperature $day_hue
$mm_sun_set $hh_sun_set * * * gsettings set org.gnome.settings-daemon.plugins.color night-light-temperature $night_hue
EOF

}

if [ $# -eq 0 ]
then
	usage
	exit 0
fi

OPTS=`getopt -o hl:p: -l help,location:,profile: -- "$@"`

if [ $? != 0 ]
then
	printf "Failed parsing options.\n"
	usage
	exit 0
fi

eval set -- "$OPTS"

while true; do
  case "$1" in
	-l | --location)
		location=$2
		shift 2
	;;
	-p | --profile)
		profile=$2
		shift 2
	;;
	-h | --help )
		usage
		shift
		exit 0
	;;
	-- )
		shift
		break
	;;
  esac
done

if [ ! $location ] || [ ! $profile ]
then
	printf "All arguments are required\n"
	exit 0
fi

get_info $location

case "$profile" in
	classic)
		gnome_hue $profile 6500 4000
	;;
	reduce_eyestrain)
		gnome_hue $profile 5900 4000
	;;
	*)
		echo "Profile \"$profile\" doesn't exist."
		exit 0
	;;
esac
